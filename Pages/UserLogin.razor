@page "/"

@layout LoginLayout

@using Dtos
@using Interfaces
@using Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json

@inject IUserServices Userservices
@inject AuthenticationStateProvider authenticationProvider
@inject NavigationManager NavManager

<head>
    <style>
        #FormCol {
            border: 1px solid rgb(184, 184, 184);
            border-radius: 15px;
        }
    </style>
</head>

<div class="container vh-100 d-flex align-items-center justify-content-center">
    <div class="row">
        <div id="FormCol" class="col">
            <h1 class="text-center m-2">Login</h1>
            <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="@nameof(Model.Username)">@nameof(Model.Username)</label>
                    <InputText id="@nameof(Model.Username)" @bind-Value="Model.Username" class="form-control" />
                    <ValidationMessage For="@(() => Model.Username)" />
                </div>

                <div class="form-group">
                    <label for="@nameof(Model.Password)">@nameof(Model.Password)</label>
                    <InputText type="password" id="@nameof(Model.Password)" @bind-Value="Model.Password"
                        class="form-control" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>

                <div class="m-2 p-2 d-flex justify-content-center">
                    <button type="submit" @onkeypress:preventDefault class="btn btn-primary">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (!CorrectLogin)
{
    <h3 style="color: rgb(248, 0, 0);" class="text-center">Invalid user or password</h3>
}

@code {
    private LoginDto Model = new();
    private bool CorrectLogin = true;
    private async Task HandleValidSubmit()
    {
        var result = await Userservices.LoginUser(Model);
        if (result.IsSuccessStatusCode)
        {
            using (var stream = await result.Content.ReadAsStreamAsync())
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true, // Hacer coincidir las propiedades sin distinción de mayúsculas y minúsculas
                        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull, // Ignorar propiedades nulas al escribir JSON
                    IgnoreReadOnlyProperties = true // Ignorar propiedades de solo lectura al escribir JSON
                    };

                var datauser = await JsonSerializer.DeserializeAsync<DataUserDto>(stream, options);

                if (datauser != null)
                {
                    Console.WriteLine($"UserName: {datauser.UserName ?? "null"}, Email: {datauser.Email ?? "null"}");

                    var AuthService = (AuthenticationService)authenticationProvider;
                    await AuthService.UpdateAuthenticationState(datauser);

                    NavManager.NavigateTo("/CourseList");
                }
                else
                {
                    CorrectLogin = false;
                }
            }
        }
        else
        {
            Model = new();
            CorrectLogin = false;
        }
    }

}