@page "/CourseRegister"

@using Dtos
@using Interfaces
@inject ICourseServices CourseServices

<PageTitle>Course Register</PageTitle>

<h1>Upload new course</h1>

<EditForm Model="model" OnValidSubmit="LoadCourse">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="@nameof(model.Title)">@nameof(model.Title)</label>
        <InputText id="@nameof(model.Title)" @bind-Value="model.Title" class="form-control" />
        <ValidationMessage For="@(() => model.Title)" />
    </div>

    <div class="form-group">
        <label for="@nameof(model.Description)">@nameof(model.Description)</label>
        <InputText id="@nameof(model.Description)" @bind-Value="model.Description" class="form-control" />
        <ValidationMessage For="@(() => model.Description)" />
    </div>

    <div class="form-group">
    <label for="@nameof(model.InstructorId)">Instructor ID</label>
    <InputNumber type="number" id="@nameof(model.InstructorId)" @bind-Value="model.InstructorId" class="form-control" />
    <ValidationMessage For="@(() => model.InstructorId)" />
    </div>


    <div class="mt-2 pt-2 d-flex justify-content-center">    
        <InputFile class="form-control" OnChange="HandleChange" accept=".png, .jpg, .jpeg" />
    </div>
    <div class="m-2 p-2 d-flex justify-content-center">
        <button @onkeypress:preventDefault class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private long maxFileSize = 1024 * 1024 * 3; // 3MB
    private List<string> errors = new();
    
    private record Model
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public int InstructorId { get; set; }
        public IBrowserFile File { get; set; }
    }

    private Model model = new ();

    private void HandleChange (InputFileChangeEventArgs e)
    {
        model.File = e.GetMultipleFiles(1)[0];
    }

    private async Task LoadCourse()
    {
        try
        {
            errors.Clear();

            if (model.File is null)
            {
                errors.Add("Error: No file selected.");
                return;
            }

            CourseDto courseDto = new()
            {
                Title= model.Title,
                Description = model.Description,
                InstructorId = model.InstructorId,
                AverageRating = 0
            };

            using (var stream = model.File.OpenReadStream(maxFileSize))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var byteArray = memoryStream.ToArray();
                courseDto.Image = byteArray;
            }

            bool result = await CourseServices.PostCourse(courseDto);
            if (result)
            {
                model = new ();
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex}");
            model = new ();
        }
        
    }
}
