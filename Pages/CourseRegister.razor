@page "/CourseRegister"

@using Dtos
@using Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Services
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@inject AuthenticationStateProvider authenticationProvider
@inject IInstructorServices InstructorServices
@inject ICourseServices CourseServices


@attribute [Authorize(Roles ="Instructor")]

<PageTitle>Course Register</PageTitle>

<h1>Upload new course</h1>

<EditForm Model="model" OnValidSubmit="LoadCourse">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="@nameof(model.Title)">@nameof(model.Title)</label>
        <InputText id="@nameof(model.Title)" @bind-Value="model.Title" class="form-control" />
        <ValidationMessage For="@(() => model.Title)" />
    </div>

    <div class="form-group">
        <label for="@nameof(model.Description)">@nameof(model.Description)</label>
        <InputText id="@nameof(model.Description)" @bind-Value="model.Description" class="form-control" />
        <ValidationMessage For="@(() => model.Description)" />
    </div>

    <div class="mt-2 pt-2 d-flex justify-content-center">    
        <InputFile class="form-control" OnChange="HandleChange" accept=".png, .jpg, .jpeg" />
    </div>
    <div class="m-2 p-2 d-flex justify-content-center">
        <button @onkeypress:preventDefault class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private long maxFileSize = 1024 * 1024 * 3; // 3MB
    private List<string> errors = new();
        

    private record Model
    {
        public string Title { get; set; }
        [MaxLength(1000, ErrorMessage = "Description cannot exceed 1000 characters.")]
        public string Description { get; set; }
        public IBrowserFile File { get; set; }
    }

    private Model model = new ();

    private void HandleChange (InputFileChangeEventArgs e)
    {
        model.File = e.GetMultipleFiles(1)[0];
    }

    private async Task LoadCourse()
    {
        try
        {
            errors.Clear();

            if (model.File is null)
            {
                errors.Add("Error: No file selected.");
                return;
            }

            var AuthService = (AuthenticationService)authenticationProvider;
            var userInformation = await AuthService.GetAuthenticationStateAsync();
            Console.WriteLine((userInformation.User?.FindFirst(ClaimTypes.Name).Value));
            var Instructor = await InstructorServices.GetInstructorByName(userInformation.User?.FindFirst(ClaimTypes.Name).Value);
            var InstructorId = Instructor.Id;

            CourseDto courseDto = new()
            {
                Title= model.Title,
                Description = model.Description,
                InstructorId = InstructorId,
                AverageRating = 0
            };

            using (var stream = model.File.OpenReadStream(maxFileSize))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var byteArray = memoryStream.ToArray();
                courseDto.Image = byteArray;
            }
            Console.WriteLine($"t:{courseDto.Title} d:{courseDto.Description}i:{courseDto.InstructorId}img:{courseDto.Image}");

            bool result = await CourseServices.PostCourse(courseDto);
            if (result)
            {
                model = new ();
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex}");
            model = new ();
        }
        
    }
}
