@page "/CourseDetails/{courseId}"

@using Interfaces
@using Dtos
@using Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ICommentServices CommentServices
@inject AuthenticationStateProvider authenticationProvider
@inject IInstructorServices InstructorServices

@implements IDisposable
@attribute [Authorize(Roles = "User,Instructor")]

@inject CourseComponentService courseComponentService
@inject ICourseServices CourseServices
@inject NavigationManager NavManager

<head>
    <style>
        .container {
            margin-top: 15px;
        }

        .main-row {
            border: 0px;
            padding: 10px;
        }

        .image {
            max-width: 200px;
            object-fit: contain;
            max-height: 200px;
        }

        .image-col{
            border: 1px solid rgb(184, 184, 184);
            border-bottom-left-radius: 12px;
            border-top-left-radius: 12px;
            padding: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .main-col{
            border: 1px solid rgb(184, 184, 184);
            border-top-right-radius: 12px;
            border-bottom-right-radius: 12px;
        }
        .last-row{
            border-top: 1px solid rgb(184, 184, 184);
        }
        .desc-row{
            border-top: 1px solid rgb(184, 184, 184);
        }


    </style>
</head>

@if (Course != null)
{
    var base64String = Convert.ToBase64String(Course.Image);
    var imageSrc = $"data:image/png;base64,{base64String}";

    <div class="container p-2">
        <div class="row d-flex mb-3 main-row align-items-stretch">
                    <div class="col-4 image-col">
                        <img src="@imageSrc" class="image" alt="CourseImage">
                    </div>
                    <div class="col-8 main-col d-flex flex-column">
                        <div class="flex-grow-1">
                            <!-- Título (20%) -->
                            <div class="row title-row h-20">
                                <div class="col-12 align-items-center justify-content-center">
                                    <h2 class="text-center m-1">
                                        @Course.Title
                                    </h2>
                                </div>
                            </div>
                            <!-- Descripción (70%) -->
                            <div class="row desc-row h-70">
                                <div class="col-12 align-items-center">
                                    <p>
                                        @Course.Description
                                    </p>
                                </div>
                            </div>
                        </div>
                        <!-- Última fila (Restante) -->
                        <div class="row last-row mt-auto">
                            <div class="col-4 d-flex align-items-center">
                                <h6 class="text-start">
                                    Course average: @Course.AverageRating
                                </h6>
                            </div>
                            <div class="col-8 d-flex align-items-center" style="border-left: 1px solid rgb(184, 184, 184);">
                                <h6 class="text-end  pe-2">
                                    Profesor name: @Instructor.Name
                                </h6>
                            </div>
                        </div>
                    </div>
                </div>
    </div>

    <Comment CourseId="int.Parse(CourseId)" UserId="UserId" Comments="Comments"></Comment>
}
else
{
    <p>No course details available</p>
}

@code {
    [Parameter]
    public string CourseId { get; set; }
    public List<CommentDto> Comments = new();

    private CourseWithEntities Course;
    private InstructorDto Instructor;
    public int UserId {get;set;}
    protected override async void OnInitialized()
    {
        var comments = await CommentServices.GetCommentsByCourse(int.Parse(CourseId));
        Comments.AddRange(comments);

        var AuthService = (AuthenticationService)authenticationProvider;
        var userInformation = await AuthService.GetAuthenticationStateAsync();
        UserId = int.Parse(userInformation.User.FindFirst("UserId").Value);
        
        int courseId = int.Parse(CourseId);
        
        courseComponentService.ChangeCourseId += StateHasChanged;
        courseId = courseComponentService.SelectedCourseId;
        Course = await CourseServices.GetCourseById(courseId);
        
        Instructor = await InstructorServices.GetInstructorByName(Course.Instructor.Name);
        StateHasChanged();
    }

    public void Dispose()
    {
        courseComponentService.ChangeCourseId -= StateHasChanged;
    }
}
