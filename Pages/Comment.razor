@page "/Comment"

@using Interfaces
@using Dtos
@using Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject AuthenticationStateProvider authenticationProvider
@inject IQualificationServices QualificationServices
@inject ICommentServices CommentServices

@attribute [Authorize(Roles = "User,Instructor")]

@inject CourseComponentService courseComponentService
@inject ICourseServices CourseServices
@inject NavigationManager NavManager

<head>
    <style>
        .user-id{
            border-right: 1px solid rgb(184, 184, 184);
        }
        .main-row-comment{
            border: 1px solid rgb(184, 184, 184);
            border-radius: 5px;
        }
    </style>
</head>

<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="@nameof(model.CourseComment)">@nameof(model.CourseComment)</label>
        <InputText id="@nameof(model.CourseComment)" @bind-Value="model.CourseComment" class="form-control" />
        <ValidationMessage For="@(() => model.CourseComment)" />
    </div>

    <div class="form-group">
        <label for="@nameof(Qualification)">@nameof(Qualification) (1-5)</label>
        <InputNumber id="@nameof(Qualification)" @bind-Value="Qualification" class="form-control" />
        <ValidationMessage For="@(() => Qualification)" />
    </div>

    <div class="d-flex justify-content-center mt-2">
        <button class="btn btn-primary" @onkeypress:preventDefault type="submit">Submit</button>
    </div>
</EditForm>


<h2 class="text-center m-5">Comments</h2>
@if (Comments.Count() > 0)
{
    <div class="container mb-3">
        @foreach (var comment in Comments)
        {
            <div class="row main-row-comment mt-2">
                <div class="col-1 p-1 user-id" >
                    User id @comment.UserId
                </div>
                <div class="col-11 p-1 comment">
                    @comment.CourseComment
                </div>
            </div>
        }
    </div>
}




@code {
    private int Qualification
    {
        get => _Qualification;
        set
        {
            _Qualification = value > 5 ? 5 : (value < 1 ? 1 : value);
        }
    }


    private int _Qualification = 1;

    private CommentDto model = new();

    [Parameter]
    public List<CommentDto> Comments { get; set; }
    [Parameter]
    public int CourseId { get; set; }
    [Parameter]
    public int UserId { get; set; }
    public async Task HandleValidSubmit()
    {
        Comments = new();
        QualificationDto qualificationDto = new()
            {
                CourseId = CourseId,
                UserId = UserId,
                CourseQualification = _Qualification
            };

        CommentDto commentDto = new()
            {
                CourseId = CourseId,
                UserId = UserId,
                CourseComment = model.CourseComment
            };

        await QualificationServices.PostQualification(qualificationDto);
        await CommentServices.PostComment(commentDto);
        var comments = await CommentServices.GetCommentsByCourse(CourseId);
        Comments.AddRange(comments);
        model = new();
        Qualification = 1;
    }
}