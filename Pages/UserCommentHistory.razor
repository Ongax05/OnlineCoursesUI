@page "/UserCommentHistory"

@using Dtos
@using Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Services
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@inject AuthenticationStateProvider authenticationProvider
@inject IQualificationServices QualificationServices
@inject ICommentServices CommentServices
@inject ICourseServices CourseServices

@attribute [Authorize(Roles = "User,Instructor")]

<head>
    <style>
        .comment-id {
            border-right: 1px solid rgb(184, 184, 184);
        }

        .main-row-comment {
            border: 1px solid rgb(184, 184, 184);
            border-radius: 5px;
        }

        .container {
            border: 1px solid rgb(184, 184, 184);
        }
    </style>
</head>

@foreach (var ucapc in userCommentsAveragePerCourse)
{
    <div class="container p-5 mt-2 mb-5">
        <div class="row">
            <div class="col-12">
                <div class="row">
                    <div class="col-12">
                        <h1 class="text-center">@ucapc.Course</h1>
                    </div>
                    <div class="col-12">
                        <h3 class="text-center">Your average qualification of this course: @Math.Round(ucapc.Average,2)</h3>
                    </div>
                </div>
            </div>
            <div class="col-12">
                @foreach (var comment in ucapc.Comments)
                {
                    <div class="row main-row-comment mt-2">
                        <div class="col-2 p-1 comment-id">
                            Comment id @comment.Id
                        </div>
                        <div class="col-10 p-1 comment">
                            @comment.CourseComment
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    public record UserCommentsAveragePerCourse
    {
        public string Course { get; set; }
        public List<CommentDto> Comments { get; set; }
        public double Average { get; set; }
    }
    private List<UserCommentsAveragePerCourse> userCommentsAveragePerCourse = new();

    protected override async Task OnInitializedAsync()

    {
        var AuthService = (AuthenticationService)authenticationProvider;
        var userInformation = await AuthService.GetAuthenticationStateAsync();
        var UserId = int.Parse(userInformation.User.FindFirst("UserId").Value);

        var comments = await CommentServices.GetCommentsByUser(UserId);
        var qualifications = await QualificationServices.GetQualificationsByUser(UserId);


        var GroupedComments = comments.GroupBy(c => c.CourseId).ToList();
        var GroupedQualifications = qualifications.GroupBy(q => q.CourseId).ToList();

        var groupedData = await Task.WhenAll(GroupedComments.Select(async group => new UserCommentsAveragePerCourse
            {
                Course = (await CourseServices.GetCourseById(group.Key)).Title,
                Comments = group.ToList(),
                Average = GroupedQualifications.Where(G => G.Key == group.Key).SelectMany(q => q.Select(cq =>
                cq.CourseQualification)).Average()
            }));

        userCommentsAveragePerCourse = groupedData.ToList();
    }
}
